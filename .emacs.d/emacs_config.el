
(add-to-list 'load-path "~/.emacs.d/w3m/")
(add-to-list 'load-path "~/.emacs.d/")
(add-to-list 'load-path "~/.emacs.d/slime/")
(add-to-list 'load-path "~/.emacs.d/evil/")
(add-to-list 'load-path "~/.emacs.d/emms/")
(add-to-list 'load-path "~/.emacs.d/bookmark+/")
(add-to-list 'load-path "~/.emacs.d/auctex/")
(add-to-list 'load-path "~/.emacs.d/magit/")
(add-to-list 'load-path "~/.emacs.d/image-dired/")
(add-to-list 'load-path "~/.emacs.d/helm/")
(require 'key-chord)
(require 'undo-tree)
(require 'naviplus)
(require 'recentf-ido)
(require 'empty_jump)
(require 'helm-config)
(require 'cstm_regex)
(require 'dired+)
(require 'tidy-org-jump)
(require 'lua-mode)
(require 'search-all-buffers)
(require 'my-make-latex)
(require 'multi-term)
(require 'popwin)
(require 'grep)
(require 'dedicated-buffers)
(require 'delete-pic)
(require 'ediff-extension)
(require 'rainbow-delimiters)
(require 'slime)
(require 'multi-eshell)
(require 'flosub)
(require 'hippie-flex)
(require 'magpie)
(require 'lorem-ipsum)
(require 'capture-templates)
(require 'yasnippet)
(require 'yasnippet-config)
(require 'my-org-screenshot)
(require 'w3m-load)
(require 'magit)
(require 'org-nav)
(require 'goto-last-change)
(require 'org-protocol)
(require 'winner)
(require 'revive)
(require 'evil)
(require 'emms-setup)
(require 'org-mode-config)
(require 'emms-player-vlc)
(server-start)

(emms-all)
(emms-default-players)

(setq emms-player-list '(emms-player-vlc))
(defun messenger() (interactive) (erc :server "im.rootdir.de" :port 6668 :nick "floppycode"))
(undo-tree-mode t)

(savehist-mode t)
(global-set-key "\C-x\C-r" 'recentf-open-most-recent-file)
(recentf-mode 1)
(put 'narrow-to-page 'disabled nil)
(global-rainbow-delimiters-mode)
(setq display-buffer-function 'popwin:display-buffer)

(setq evil-default-cursor t)
(load-theme 'tsdh-light)
(yas--initialize)
(yas/load-directory "~/.emacs.d/snippets")
(winner-mode 1)
(ido-mode 1)
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(setq ido-case-fold t)
(setq confirm-nonexistent-file-or-buffer nil)
(scroll-bar-mode 0)
(autoload 'save-current-configuration "revive" "Save status" t)
(autoload 'resume "revive" "Resume Emacs" t)
(autoload 'wipe "revive" "Wipe Emacs" t)

(menu-bar-mode 0)
(tool-bar-mode 0)
(evil-mode 1)


(define-key evil-motion-state-map (kbd "s") 'evil-backward-char)
;Den Evil normal state als standard für alles setzen
(setq evil-normal-state-modes (append evil-emacs-state-modes evil-motion-state-modes evil-normal-state-modes))
;(setq evil-motion-state-modes (append evil-emacs-state-modes evil-motion-state-modes))
(setq evil-emacs-state-modes nil)
(setq evil-motion-state-modes nil)

(key-chord-mode 1)

(defvar my-keys-minor-mode-map (make-keymap) "my-keys-minor-mode keymap.")   
    (define-minor-mode my-keys-minor-mode
          "A minor mode so that my key settings override annoying major modes."
              t " my-keys" 'my-keys-minor-mode-map)
    
    (my-keys-minor-mode 1)
    
    (defun my-minibuffer-setup-hook ()
          (my-keys-minor-mode 0))
    
    (add-hook 'minibuffer-setup-hook 'my-minibuffer-setup-hook)

(global-set-key (kbd "C-ö e n") 'emms-next)
(global-set-key (kbd "C-ö e p") 'emms-previous)
(global-set-key (kbd "C-ö e P") 'emms-pause)
(global-set-key (kbd "C-ö e s") 'emms-shuffle)
(global-set-key (kbd "C-ö e r") 'emms-repeat)
(global-set-key (kbd "C-ö e f") 'emms-add-find)
(global-set-key (kbd "C-ö e d") 'emms-add-directory-tree)
(global-set-key (kbd "C-ö e l") 'emms-playlist-mode-go)

;dired mode
(evil-declare-key 'normal dired-mode-map (kbd "s") 'evil-backward-char)
(evil-declare-key 'normal dired-mode-map (kbd "n") 'evil-next-line)
(evil-declare-key 'normal dired-mode-map (kbd "r") 'evil-previous-line)
(evil-declare-key 'normal dired-mode-map (kbd "t") 'evil-forward-char)

(evil-declare-key 'normal dired-mode-map (kbd "M-r") 'windmove-up)
(evil-declare-key 'normal dired-mode-map (kbd "M-n") 'windmove-down)
(evil-declare-key 'normal dired-mode-map (kbd "M-s") 'windmove-left)
(evil-declare-key 'normal dired-mode-map (kbd "M-t") 'windmove-right)

(key-chord-define evil-normal-state-map ",," 'evil-force-normal-state)
(key-chord-define evil-visual-state-map ",," 'evil-change-to-previous-state)
(key-chord-define evil-insert-state-map ",," 'evil-normal-state)
(key-chord-define evil-replace-state-map ",," 'evil-normal-state)
(key-chord-define evil-normal-state-map "ää" 'evil-execute-in-emacs-state)

(define-key evil-normal-state-map "s" 'evil-backward-char)
(define-key evil-normal-state-map "n" 'evil-next-line)
(define-key evil-normal-state-map "r" 'evil-previous-line)
(define-key evil-normal-state-map "t" 'evil-forward-char)

(define-key evil-motion-state-map "s" 'evil-backward-char)
(define-key evil-motion-state-map "n" 'evil-next-line)
(define-key evil-motion-state-map "r" 'evil-previous-line)
(define-key evil-motion-state-map "t" 'evil-forward-char)

(define-key evil-normal-state-map "k" 'evil-substitute)
(define-key evil-normal-state-map "j" 'evil-replace)
(define-key evil-normal-state-map "h" 'evil-search-next)
(define-key evil-normal-state-map "H" 'evil-search-previous)
(define-key evil-normal-state-map "l" 'evil-find-char-to)
(define-key evil-normal-state-map "L" 'evil-find-char-to-backward)

(define-key evil-motion-state-map "k" 'evil-substitute)
(define-key evil-motion-state-map "j" 'evil-replace)
(define-key evil-motion-state-map "h" 'evil-search-next)
(define-key evil-motion-state-map "H" 'evil-search-previous)
(define-key evil-motion-state-map "l" 'evil-find-char-to)
(define-key evil-motion-state-map "L" 'evil-find-char-to-backward)

(define-key evil-normal-state-map "\C-n" 'evil-scroll-down)
(define-key evil-normal-state-map "\C-r" 'evil-scroll-up)

(define-key my-keys-minor-mode-map (kbd "M-r") 'windmove-up)
(define-key my-keys-minor-mode-map "\C-r" 'evil-scroll-up)
(define-key my-keys-minor-mode-map "\C-n" 'evil-scroll-down)
(define-key evil-normal-state-map (kbd "M-r") 'windmove-up)
(define-key evil-normal-state-map (kbd "M-n") 'windmove-down)
(define-key evil-normal-state-map (kbd "M-s") 'windmove-left)

(define-key evil-normal-state-local-map (kbd "s") 'evil-backward-char)
;(define-key evil-normal-state (kbd "s") 'evil-backward-char)

(define-key my-keys-minor-mode-map (kbd "M-t") 'windmove-right)
(define-key my-keys-minor-mode-map "\M-x" 'execute-extended-command)
(define-key my-keys-minor-mode-map (kbd "<f8>") 'bmkp-cycle-this-buffer)

(global-set-key (kbd "C-ä g") 'yas/make-placeholder)
(global-set-key (kbd "C-ä f") 'yas/new-snippet-with-content)
(global-set-key (kbd "C-ä h") 'yas/oneshot-snippet)
(global-set-key (kbd "C-ä k") 'epa-encrypt-region)
(global-set-key (kbd "C-ä K") 'epa-decrypt-region)
(global-set-key (kbd "C-ä e") 'eval-region)
(global-set-key (kbd "C-ä E") 'eval-buffer)
(global-set-key (kbd "C-ä s") 'my-org-screenshot2)
(global-set-key (kbd "C-ö o") 'search-all-buffers)
(global-set-key (kbd "C-ö o") 'helm-occur)
(global-set-key (kbd "C-ö C-o") 'helm-multi-occur)
(global-set-key (kbd "C-ö d") 'doc-view-mode)
(define-key evil-normal-state-map "u" 'undo-tree-undo)
(define-key evil-normal-state-map "U" 'undo-tree-redo)
(global-set-key (kbd "C-ä l") 'my-make-latex)
(global-set-key (kbd "C-ä L") 'my-make-latex-replace)
(global-set-key (kbd "C-ä w s") 'save-current-configuration)
(global-set-key (kbd "C-ä w r") 'resume)
(global-unset-key (kbd "C-t"))
(global-set-key (kbd "C-t") popwin:keymap)
(define-key evil-normal-state-map (kbd "C-t") popwin:keymap)
(define-key evil-insert-state-map (kbd "C-t") popwin:keymap)
(global-set-key (kbd "C-ä w d") 'dedi_func)
(global-set-key (kbd "C-ä w D") 'undedi_func)
(global-set-key (kbd "C-ä w u") 'winner-undo)
(global-set-key (kbd "C-x f") 'ido-find-file)
(global-set-key (kbd "C-x C-f") 'ido-find-file-other-window)
(global-set-key (kbd "C-x C-b") 'ido-switch-buffer-other-window)

(global-set-key (kbd "C-ö b") 'ido-display-buffer)
(global-set-key (kbd "C-ö f") 'ido-display-file)

(global-set-key (kbd "C-x g") 'recentf-interactive-complete)
(global-set-key (kbd "C-ö n") 'jumpToNextEmpty)
(global-set-key (kbd "C-ö r") 'jumpToPrevEmpty)
(global-set-key (kbd "C-ö C-n") 'jumpToNextEmpty)
(global-set-key (kbd "C-ö C-r") 'jumpToPrevEmpty)
(global-set-key (kbd "C-)") 'jumpToNextEmpty)
(global-set-key (kbd "C-(") 'jumpToPrevEmpty)

(global-set-key (kbd "C-ä i") 'cstmRegexNextManager)
(global-set-key (kbd "C-ä u") 'cstmRegexPrevManager)
(global-set-key (kbd "C-ö t") 'org-tree-to-indirect-buffer)
(global-set-key (kbd "C-ö h") 'pop-global-mark)
(global-set-key (kbd "C-ä n") 'yas-new-snippet)
(global-set-key (kbd "C-ä q") 'yas-load-snippet-buffer)
(global-set-key (kbd "C-ö g") 'jump-vert-up)
(global-set-key (kbd "C-ö G") 'jump-vert-down)
(global-set-key (kbd "C-ö l") 'list-matching-lines)
(global-set-key (kbd "C-ö m l") 'magit-pull)
(global-set-key (kbd "C-ö m h") 'magit-push)
(global-set-key (kbd "C-ö m s") 'magit-status)
(global-set-key (kbd "M-ä") 'move-to-window-line-top-bottom)
(global-set-key (kbd "M-ö") 'hippie-expand)
(global-set-key (kbd "C-ä c") 'dabbrev-completion)
(global-set-key (kbd "C-ü") (lookup-key global-map (kbd "C-x")))
(global-set-key (kbd "C-ö k") 'helm-show-kill-ring)
(global-set-key "\C-x \C-n" 'evil-complete-next-line)
(global-set-key "\C-x \C-p" 'evil-complete-previous-line)
(define-key evil-insert-state-map "\C-x \C-n" 'evil-complete-next-line)
(define-key evil-insert-state-map "\C-x \C-p" 'evil-complete-previous-line)

(global-set-key (kbd "C-ü C-n") 'evil-complete-next-line)
(global-set-key (kbd "C-ü C-p") 'evil-complete-previous-line)
(define-key evil-insert-state-map (kbd "C-ü C-n") 'evil-complete-next-line)
(define-key evil-insert-state-map (kbd "C-ü C-p") 'evil-complete-previous-line)
(global-unset-key "\M-h")
(global-set-key (kbd "M-h M-x") 'helm-M-x)
(define-key global-map (kbd "M-h M-x") 'helm-M-x)
(define-key evil-normal-state-map (kbd "M-h M-x") 'helm-M-x)
(global-set-key (kbd "C-ö s") 'helm-do-grep)
(global-set-key (kbd "C-ö D") 'org-display-inline-images) 
(global-set-key (kbd "M-m") 'helm-for-files)
(global-set-key (kbd "C-ö h") 'helm-c-apropos)
(global-set-key (kbd "C-ö i") 'helm-imenu)


(evil-define-key 'emacs my-keys-minor-mode-map (kbd "r") 'evil-previous-line)
(evil-define-key 'emacs my-keys-minor-mode-map (kbd "n") 'evil-next-line)
(evil-define-key 'emacs my-keys-minor-mode-map (kbd "t") 'evil-forward-char)
(evil-define-key 'emacs my-keys-minor-mode-map (kbd "s") 'evil-backward-char)

(global-set-key (kbd "C-ä j") 'evil-normal-state)

(global-set-key (kbd "C-x ö b") 'view-buffer-other-window)
(global-set-key (kbd "C-x ö f") 'find-file-other-window)

(defalias 'kill-frame 'delete-frame)

(global-set-key (kbd "C-ä b") 'flosub-readall)
(global-set-key (kbd "C-ä .") 'org-capture)

(define-key evil-normal-state-map (kbd "ü") (lookup-key global-map (kbd "C-ü")))
(define-key evil-normal-state-map (kbd "ö") (lookup-key global-map (kbd "C-ö")))
(define-key evil-normal-state-map (kbd "ä") (lookup-key global-map (kbd "C-ä")))

(global-set-key (kbd "C-ä v") 'eval-expression)

(global-set-key (kbd "<f12>") 'org-agenda)
(global-set-key (kbd "<f5>") 'bh/org-todo)
(global-set-key (kbd "<f7>") 'bh/set-truncate-lines)
(global-set-key (kbd "<f11>") 'org-clock-goto)
(define-key evil-normal-state-map (kbd "M-w") 'bury-buffer)
(define-key evil-normal-state-map (kbd "C-ä o") 'org-babel-tangle)
(define-key evil-normal-state-map (kbd "C-ä v") 'revert-buffer)
(define-key global-map (kbd "C-ö ä") 'magpie-expand)
(define-key global-map (kbd "C-ä ö") 'flosub)
(setq org-default-notes-file (concat org-directory "/notes.org"))
(define-key global-map (kbd "C-ö ö") 'org-capture)
(global-set-key (kbd "C-ö a") 'helm-org-headlines)
(global-set-key (kbd "C-x j n") 'bmkp-cycle-this-buffer)
(global-set-key (kbd "C-M-n") 'jump-head-up-wrapper)
(global-set-key (kbd "C-ä r") 'repeat)

(global-set-key (kbd "C-#") (lookup-key global-map (kbd "C-ü")))
(add-hook 'org-mode-hook (lambda() (define-key (current-local-map) (kbd "C-#") (lookup-key global-map (kbd "C-ü")))))
(global-set-key (kbd "C-6") (lookup-key global-map (kbd "C-ö")))
(global-set-key (kbd "C-|") (lookup-key global-map (kbd "C-ä")))

;; -- Display images in org mode
;; enable image mode first
(iimage-mode)
;; add the org file link format to the iimage mode regex
(add-to-list 'iimage-mode-image-regex-alist
(cons (concat "\\[\\[file:\\(~?" iimage-mode-image-filename-regex "\\)\\]") 1))
;; add a hook so we can display images on load
(add-hook 'org-mode-hook '(lambda () (org-turn-on-iimage-in-org)))
;; function to setup images for display on load
(defun org-turn-on-iimage-in-org ()
"display images in your org file"
(interactive)
(turn-on-iimage-mode)
(set-face-underline-p 'org-link nil))
;; function to toggle images in a org bugger
(defun org-toggle-iimage-in-org ()
"display images in your org file"
(interactive)
(if (face-underline-p 'org-link)
(set-face-underline-p 'org-link nil)
(set-face-underline-p 'org-link t))
(call-interactively 'iimage-mode))
